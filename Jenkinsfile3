pipeline {
    agent any
     
    options {
        buildDiscarder(logRotator(numToKeepStr: '2'))
        skipDefaultCheckout(true)
        disableConcurrentBuilds()
        timeout(time: 20, unit: 'MINUTES')
        timestamps()
    }
    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: '')
        string(name: 'SONAR_VERSION', defaultValue: '5.0.1', description: '')
    }
    environment {
        DOCKER_CREDENTIALS_ID = 'tcc-docker-hub'
    }    
    
    triggers {
        githubPush()
    }
    stages {
        stage ('Checkout') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project") {
                    checkout([
                        $class: 'GitSCM',
                        branches: [[name: "*/${params.BRANCH_NAME}"]],
                        doGenerateSubmoduleConfigurations: false,
                        extensions: [[$class: 'LocalBranch']],
                        submoduleCfg: [],
                        userRemoteConfigs: [[
                        url: 'https://github.com/cyprientemateu/cyprien-ecommerce-project.git',
                        credentialsId: 'tcc-github-access'
                        ]]
                    ])
                }
            }
        }

        stage('Test Current Directory') {
            steps {
                sh '''
                ls
                rm -rf cyprien-ecommerce-project@tmp
                ls
                pwd
                whoami
                '''
            }
        }
        
        stage('Docker Login') {
            steps {
                withCredentials([usernamePassword(credentialsId: 'tcc-docker-hub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh 'echo $DOCKER_PASSWORD | docker login -u $DOCKER_USER --password-stdin'
                }
            }
        } 

        stage('Docker build ui') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/ui"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-ui:$TAG .
                    '''
                }  
            }
        } 

        stage('Docker build catalog') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/catalog"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-catalog:$TAG .
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-catalog-db:$TAG . -f Dockerfile-db
                    '''
                }  
            }
        } 
        stage('Docker build checkout') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/checkout"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-checkout:$TAG .
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-checkout-db:$TAG . -f Dockerfile-db
                    '''
                }  
            }
        } 

        stage('Docker build orders') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/orders"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-orders:$TAG .
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-orders-db:$TAG . -f Dockerfile-db
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-orders-db-rabbitmq:${TAG} . -f Dockerfile-rabbit-mq
                    '''
                }  
            }
        } 

        stage('Docker build cart') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/cart"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-cart:$TAG .
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-cart-dynamo-db:$TAG . -f Dockerfile-dynamodb
                    '''
                }  
            }
        }
        stage('Docker build assets') {
            steps {
                dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/assets"){
                    sh '''
                    TAG=$(git rev-parse --short=6 HEAD)
                    docker build -t cyprientemateu/a1cyprien-do-it-yourself-assets:$TAG .
                    '''
                }  
            }
        }

        stage('Docker Push') {
            steps {
                script {
                    dir("${WORKSPACE}/cyprien-ecommerce-project/do-it-yourself/src/"){
                        // Set $TAG variable
                        def tag = sh(script: 'git rev-parse --short=6 HEAD', returnStdout: true).trim()
                        env.TAG = tag
                        // $TAG=$(git rev-parse --short=6 HEAD)
                        def images = [
                            'a1cyprien-do-it-yourself-ui',
                            'a1cyprien-do-it-yourself-catalog',
                            'a1cyprien-do-it-yourself-catalog-db',
                            'a1cyprien-do-it-yourself-checkout',
                            'a1cyprien-do-it-yourself-checkout-db',
                            'a1cyprien-do-it-yourself-orders',
                            'a1cyprien-do-it-yourself-orders-db',
                            'a1cyprien-do-it-yourself-orders-db-rabbitmq',
                            'a1cyprien-do-it-yourself-cart',
                            'a1cyprien-do-it-yourself-cart-dynamo-db',
                            'a1cyprien-do-it-yourself-assets'
                        ]
                        images.each { image ->
                            sh "docker push cyprientemateu/${image}:$TAG"
                        }
                    }
                }
            }
        }
        stage('trigger-deployment') {
            steps {
                withCredentials([string(credentialsId: 'tcc-github-access', variable: 'GITHUB_TOKEN')]) {
                    sh '''
                        TAG=${TAG}
                        rm -rf cyprien-ecommerce-project-automation || true
                        git clone https://cyprientemateu:${GITHUB_TOKEN}@github.com/cyprientemateu/cyprien-ecommerce-project-automation.git 
                        cd cyprien-ecommerce-project-automation/chart

                        yq eval '.ui.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.catalog.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.catalog-db.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.checkout.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.checkout-db.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.orders.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.orders-db.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.orders-db-rabbitmq.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.cart.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.cart-dynamodb.tag = "'"$TAG"'"' -i dev-values.yaml
                        yq eval '.assets.tag = "'"$TAG"'"' -i dev-values.yaml
                        
                        git config --global user.name "cyprientemateu"
                        git config --global user.email cyprien.temateu@yahoo.com
                        
                        git add -A
                        if git diff-index --quiet HEAD; then
                            echo "No changes to commit"
                        else
                            git commit -m "updating tags to ${TAG}"
                            git push origin main
                        fi
                    '''
                }    
            }
        } 
    }
    post {
        success {
            slackSend color: '#2EB67D',
            channel: 'development-alerts', 
            message: "*a1cyprien-do-it-yourself Project Build Status*" +
            "\n Project Name: do-it-yourself" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *SUCCESS*" +
            "\n Build url : ${env.BUILD_URL}"
        }
        failure {
            slackSend color: '#E01E5A',
            channel: 'development-alerts',  
            message: "*a1cyprien-do-it-yourself Project Build Status*" +
            "\n Project Name: do-it-yourself" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *FAILED*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }
        unstable {
            slackSend color: '#ECB22E',
            channel: 'development-alerts', 
            message: "*a1cyprien-do-it-yourself Project Build Status*" +
            "\n Project Name: do-it-yourself" +
            "\n Job Name: ${env.JOB_NAME}" +
            "\n Build number: ${currentBuild.displayName}" +
            "\n Build Status : *UNSTABLE*" +
            "\n Action : Please check the console output to fix this job IMMEDIATELY" +
            "\n Build url : ${env.BUILD_URL}"
        }   
    }        
}
    